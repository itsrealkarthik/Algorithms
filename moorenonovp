module moorenonovp (clk, reset, din, dout, state);
input clk, reset, din; output reg dout;
output reg [2:0] state=3'b000;
always @(posedge clk)
begin
if (reset)
begin
dout<=1'b0;
state<=3'b000;
end
else
begin
case (state)
3'b000: begin
dout<=1'b0;
if (din==1)
state <= 3'b001;
end
3'b001: begin dout<=1'b0;
if (din==1)
state <= 3'b010;
end
3'b010: begin
dout <= 1'b0;
if (din==1)
state <= 3'b011;
else
state<=3'b001;
end
3'b01l: begin
dout <= 1'b0;
if (din==1)
state <= 3'b100;
else
state <= 3'b000;
end
3'b100: begin
dout <= 1'b1;
if (din==1)
state <= 3'b001;
else
state <= 3'b000;
end
endcase
end
end
endmodule


Testbench
module moorenonovp (clk, reset, din, dout, state);
input clk, reset, din; output reg dout;
output reg [2:0] state=3'b000;
always @(posedge clk)
begin
if (reset)
begin
dout<=1'b0;
state<=3'b000;
end
else
begin
case (state)
3'b000: begin
dout<=1'b0;
if (din==1)
state <= 3'b001;
end
3'b001: begin dout<=1'b0;
if (din==1)
state <= 3'b010;
end
3'b010: begin
dout <= 1'b0;
if (din==1)
state <= 3'b011;
else
state<=3'b001;
end
3'b01l: begin
dout <= 1'b0;
if (din==1)
state <= 3'b100;
else
state <= 3'b000;
end
3'b100: begin
dout <= 1'b1;
if (din==1)
state <= 3'b001;
else
state <= 3'b000;
end
endcase
end
end
endmodule
